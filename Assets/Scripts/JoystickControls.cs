//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/JoystickControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoystickControls"",
    ""maps"": [
        {
            ""name"": ""Hider1"",
            ""id"": ""8b9ffb78-4e23-4363-88bc-3e0b0dcbfc68"",
            ""actions"": [
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""04d44dba-23e0-41b6-a47c-5521dd844d7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""932ea01c-dda7-4a05-a133-f4017d231979"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""3df171c6-f0e2-4748-836f-c933743585e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""6be48a65-63e4-4a08-9a6d-0b26277c214d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""8649ad74-186e-4a9f-8e77-33243321a27c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe28b81a-a0a2-4695-b3df-06c70f0e39bd"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c232eb06-5cfa-49a7-aecf-2ac0a12c8b59"",
                    ""path"": ""<XInputController>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e27d66b4-0ed2-4682-aa7d-1d321b2fc529"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da4c91e1-583c-4161-9301-2fff470b42f6"",
                    ""path"": ""<XInputController>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dff35d9-8dc6-40d6-8afd-1516755492d6"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9adfb582-e5eb-4280-b13a-1288f5c357e9"",
                    ""path"": ""<XInputController>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71ca2b3d-cada-446f-a74c-b2fd51811db4"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd935d8e-8fc6-40a4-8eda-4baccd00d7ef"",
                    ""path"": ""<XInputController>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a1f8a39-49d2-45b1-8201-6b90fd3998d6"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hider2"",
            ""id"": ""204fc53c-6cde-4b99-86bd-ad01b68b078c"",
            ""actions"": [
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""86079f90-1864-487f-80f6-1478d9391445"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ffbd388d-a481-437e-8ebd-a67ba3ab85fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""897ebd98-099a-4500-b70b-4188deb5ca04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""863c89bb-65a6-4cf2-83e5-e574ca468458"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""563e848e-117c-451f-aa3a-9d4afd401b89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9136ca3b-3e9e-427a-84fc-ba1c68a9be05"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c7b1c9-181c-48c5-807b-11ff842a813e"",
                    ""path"": ""<DualShockGamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c60232ff-7c66-43d9-b760-9758b15290ca"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f20559c-3cc8-409c-b9d2-d42ac7cad2b8"",
                    ""path"": ""<DualShockGamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2faa9d16-ad26-4d2c-b689-f5c8851b2d18"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""546c115a-86ab-4855-9dde-5ed2309f6212"",
                    ""path"": ""<DualShockGamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c148b15-5424-4cb9-beb5-ab3cf715e2da"",
                    ""path"": ""<DualShockGamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b46c9aa1-a2e6-4cf7-a1db-eeb32964ffc0"",
                    ""path"": ""<DualShockGamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a20bd15f-d873-4882-9929-f11434aba8f1"",
                    ""path"": ""<DualShockGamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hider3"",
            ""id"": ""a6458f03-2a70-45a2-a66b-eab65b62071c"",
            ""actions"": [
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""c2bfb616-f556-41ee-bf1c-a45589272fe4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""82f0c8a2-6caf-478f-b94a-b4968f9c045f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""779eaefa-be31-4836-9bf0-36a7e824577e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""4e23524c-dcd4-4c7b-88b0-e8125e80ed83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""c9cd9eb6-ef98-42b8-9943-b9488f84380c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f57da89-c432-4786-8d86-1d87a2628220"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2420d3a1-d5d7-4c74-a3a4-f1dded998f41"",
                    ""path"": ""<XInputController>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bba569b-dfdf-466f-959a-ef60e48f1e75"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""896c3a27-0141-4fb3-acb1-42cd2ea362a6"",
                    ""path"": ""<XInputController>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d56cca97-6f6d-4fa2-9662-1f8e307f8c42"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e27d3810-2148-4c5a-825f-6a466f5bf9ef"",
                    ""path"": ""<XInputController>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28476c9c-8117-4017-b0e6-87ecb59c8946"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""030e44be-2b83-41aa-86a7-c84343bbb0b2"",
                    ""path"": ""<XInputController>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""234efacb-e330-4748-8ebf-b2851c9da689"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hider"",
            ""id"": ""2567eadb-c769-4f7c-95ff-811e1fcfc93a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d217139c-392a-4075-8a7b-bbee4cce02b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""da360226-5bf2-43b8-9106-61f148c098aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""e00634df-6d5b-4629-85c2-a1335bf7db5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51c42826-2a11-4777-8012-c670c5329bb1"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a16622ad-2890-45d8-bd4e-68e593c78686"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c3dccba-68c7-4522-aa3b-ac0f25e94381"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""433f0ab0-4fdd-436a-bfd4-16188626200e"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad1f6a3-2dd7-4311-96c2-3904ab133fd3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hider1
        m_Hider1 = asset.FindActionMap("Hider1", throwIfNotFound: true);
        m_Hider1_Transform = m_Hider1.FindAction("Transform", throwIfNotFound: true);
        m_Hider1_MoveLeft = m_Hider1.FindAction("MoveLeft", throwIfNotFound: true);
        m_Hider1_MoveRight = m_Hider1.FindAction("MoveRight", throwIfNotFound: true);
        m_Hider1_MoveUp = m_Hider1.FindAction("MoveUp", throwIfNotFound: true);
        m_Hider1_MoveDown = m_Hider1.FindAction("MoveDown", throwIfNotFound: true);
        // Hider2
        m_Hider2 = asset.FindActionMap("Hider2", throwIfNotFound: true);
        m_Hider2_Transform = m_Hider2.FindAction("Transform", throwIfNotFound: true);
        m_Hider2_MoveLeft = m_Hider2.FindAction("MoveLeft", throwIfNotFound: true);
        m_Hider2_MoveRight = m_Hider2.FindAction("MoveRight", throwIfNotFound: true);
        m_Hider2_MoveUp = m_Hider2.FindAction("MoveUp", throwIfNotFound: true);
        m_Hider2_MoveDown = m_Hider2.FindAction("MoveDown", throwIfNotFound: true);
        // Hider3
        m_Hider3 = asset.FindActionMap("Hider3", throwIfNotFound: true);
        m_Hider3_Transform = m_Hider3.FindAction("Transform", throwIfNotFound: true);
        m_Hider3_MoveLeft = m_Hider3.FindAction("MoveLeft", throwIfNotFound: true);
        m_Hider3_MoveRight = m_Hider3.FindAction("MoveRight", throwIfNotFound: true);
        m_Hider3_MoveUp = m_Hider3.FindAction("MoveUp", throwIfNotFound: true);
        m_Hider3_MoveDown = m_Hider3.FindAction("MoveDown", throwIfNotFound: true);
        // Hider
        m_Hider = asset.FindActionMap("Hider", throwIfNotFound: true);
        m_Hider_Move = m_Hider.FindAction("Move", throwIfNotFound: true);
        m_Hider_Look = m_Hider.FindAction("Look", throwIfNotFound: true);
        m_Hider_Transform = m_Hider.FindAction("Transform", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hider1
    private readonly InputActionMap m_Hider1;
    private List<IHider1Actions> m_Hider1ActionsCallbackInterfaces = new List<IHider1Actions>();
    private readonly InputAction m_Hider1_Transform;
    private readonly InputAction m_Hider1_MoveLeft;
    private readonly InputAction m_Hider1_MoveRight;
    private readonly InputAction m_Hider1_MoveUp;
    private readonly InputAction m_Hider1_MoveDown;
    public struct Hider1Actions
    {
        private @JoystickControls m_Wrapper;
        public Hider1Actions(@JoystickControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Transform => m_Wrapper.m_Hider1_Transform;
        public InputAction @MoveLeft => m_Wrapper.m_Hider1_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_Hider1_MoveRight;
        public InputAction @MoveUp => m_Wrapper.m_Hider1_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Hider1_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Hider1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Hider1Actions set) { return set.Get(); }
        public void AddCallbacks(IHider1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Hider1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Hider1ActionsCallbackInterfaces.Add(instance);
            @Transform.started += instance.OnTransform;
            @Transform.performed += instance.OnTransform;
            @Transform.canceled += instance.OnTransform;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
        }

        private void UnregisterCallbacks(IHider1Actions instance)
        {
            @Transform.started -= instance.OnTransform;
            @Transform.performed -= instance.OnTransform;
            @Transform.canceled -= instance.OnTransform;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
        }

        public void RemoveCallbacks(IHider1Actions instance)
        {
            if (m_Wrapper.m_Hider1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHider1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Hider1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Hider1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Hider1Actions @Hider1 => new Hider1Actions(this);

    // Hider2
    private readonly InputActionMap m_Hider2;
    private List<IHider2Actions> m_Hider2ActionsCallbackInterfaces = new List<IHider2Actions>();
    private readonly InputAction m_Hider2_Transform;
    private readonly InputAction m_Hider2_MoveLeft;
    private readonly InputAction m_Hider2_MoveRight;
    private readonly InputAction m_Hider2_MoveUp;
    private readonly InputAction m_Hider2_MoveDown;
    public struct Hider2Actions
    {
        private @JoystickControls m_Wrapper;
        public Hider2Actions(@JoystickControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Transform => m_Wrapper.m_Hider2_Transform;
        public InputAction @MoveLeft => m_Wrapper.m_Hider2_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_Hider2_MoveRight;
        public InputAction @MoveUp => m_Wrapper.m_Hider2_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Hider2_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Hider2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Hider2Actions set) { return set.Get(); }
        public void AddCallbacks(IHider2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Hider2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Hider2ActionsCallbackInterfaces.Add(instance);
            @Transform.started += instance.OnTransform;
            @Transform.performed += instance.OnTransform;
            @Transform.canceled += instance.OnTransform;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
        }

        private void UnregisterCallbacks(IHider2Actions instance)
        {
            @Transform.started -= instance.OnTransform;
            @Transform.performed -= instance.OnTransform;
            @Transform.canceled -= instance.OnTransform;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
        }

        public void RemoveCallbacks(IHider2Actions instance)
        {
            if (m_Wrapper.m_Hider2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHider2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Hider2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Hider2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Hider2Actions @Hider2 => new Hider2Actions(this);

    // Hider3
    private readonly InputActionMap m_Hider3;
    private List<IHider3Actions> m_Hider3ActionsCallbackInterfaces = new List<IHider3Actions>();
    private readonly InputAction m_Hider3_Transform;
    private readonly InputAction m_Hider3_MoveLeft;
    private readonly InputAction m_Hider3_MoveRight;
    private readonly InputAction m_Hider3_MoveUp;
    private readonly InputAction m_Hider3_MoveDown;
    public struct Hider3Actions
    {
        private @JoystickControls m_Wrapper;
        public Hider3Actions(@JoystickControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Transform => m_Wrapper.m_Hider3_Transform;
        public InputAction @MoveLeft => m_Wrapper.m_Hider3_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_Hider3_MoveRight;
        public InputAction @MoveUp => m_Wrapper.m_Hider3_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Hider3_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Hider3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Hider3Actions set) { return set.Get(); }
        public void AddCallbacks(IHider3Actions instance)
        {
            if (instance == null || m_Wrapper.m_Hider3ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Hider3ActionsCallbackInterfaces.Add(instance);
            @Transform.started += instance.OnTransform;
            @Transform.performed += instance.OnTransform;
            @Transform.canceled += instance.OnTransform;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
        }

        private void UnregisterCallbacks(IHider3Actions instance)
        {
            @Transform.started -= instance.OnTransform;
            @Transform.performed -= instance.OnTransform;
            @Transform.canceled -= instance.OnTransform;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
        }

        public void RemoveCallbacks(IHider3Actions instance)
        {
            if (m_Wrapper.m_Hider3ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHider3Actions instance)
        {
            foreach (var item in m_Wrapper.m_Hider3ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Hider3ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Hider3Actions @Hider3 => new Hider3Actions(this);

    // Hider
    private readonly InputActionMap m_Hider;
    private List<IHiderActions> m_HiderActionsCallbackInterfaces = new List<IHiderActions>();
    private readonly InputAction m_Hider_Move;
    private readonly InputAction m_Hider_Look;
    private readonly InputAction m_Hider_Transform;
    public struct HiderActions
    {
        private @JoystickControls m_Wrapper;
        public HiderActions(@JoystickControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Hider_Move;
        public InputAction @Look => m_Wrapper.m_Hider_Look;
        public InputAction @Transform => m_Wrapper.m_Hider_Transform;
        public InputActionMap Get() { return m_Wrapper.m_Hider; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HiderActions set) { return set.Get(); }
        public void AddCallbacks(IHiderActions instance)
        {
            if (instance == null || m_Wrapper.m_HiderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HiderActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Transform.started += instance.OnTransform;
            @Transform.performed += instance.OnTransform;
            @Transform.canceled += instance.OnTransform;
        }

        private void UnregisterCallbacks(IHiderActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Transform.started -= instance.OnTransform;
            @Transform.performed -= instance.OnTransform;
            @Transform.canceled -= instance.OnTransform;
        }

        public void RemoveCallbacks(IHiderActions instance)
        {
            if (m_Wrapper.m_HiderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHiderActions instance)
        {
            foreach (var item in m_Wrapper.m_HiderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HiderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HiderActions @Hider => new HiderActions(this);
    public interface IHider1Actions
    {
        void OnTransform(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
    public interface IHider2Actions
    {
        void OnTransform(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
    public interface IHider3Actions
    {
        void OnTransform(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
    public interface IHiderActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnTransform(InputAction.CallbackContext context);
    }
}
